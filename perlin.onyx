package perlin

use core

noise :: (x, y, z: f64) -> f64 {
    X := (cast(i32) core.math.floor(x)) & 255;
    Y := (cast(i32) core.math.floor(y)) & 255;
    Z := (cast(i32) core.math.floor(z)) & 255;

    x -= core.math.floor(x);
    y -= core.math.floor(y);
    z -= core.math.floor(z);

    u := fade(x);
    v := fade(y);
    w := fade(z);

    A  := p(X)   + Y;
    AA := p(A)   + Z;
    AB := p(A+1) + Z;
    B  := p(X+1) + Y;
    BA := p(B)   + Z;
    BB := p(B+1) + Z;

    return lerp(w, lerp(v, lerp(u, grad(p(AA  ), x  , y  , z   ),
                                   grad(p(BA  ), x-1, y  , z   )),
                           lerp(u, grad(p(AB  ), x  , y-1, z   ),
                                   grad(p(BB  ), x-1, y-1, z   ))),
                   lerp(v, lerp(u, grad(p(AA+1), x  , y  , z-1 ),
                                   grad(p(BA+1), x-1, y  , z-1 )),
                           lerp(u, grad(p(AB+1), x  , y-1, z-1 ),
                                   grad(p(BB+1), x-1, y-1, z-1 ))));
}


#local {
    fade :: macro (t: f64)       => t * t * t * (t * (t * 6 - 15) + 10);
    lerp :: macro (t, a, b: f64) => a + t * (b - a);

    grad :: (hash: i32, x, y, z: f64) -> f64 {
        switch hash & 0xF {
            case 0x0 do return  x + y;
            case 0x1 do return -x + y;
            case 0x2 do return  x - y;
            case 0x3 do return -x - y;
            case 0x4 do return  x + z;
            case 0x5 do return -x + z;
            case 0x6 do return  x - z;
            case 0x7 do return -x - z;
            case 0x8 do return  y + z;
            case 0x9 do return -y + z;
            case 0xA do return  y - z;
            case 0xB do return -y - z;
            case 0xC do return  y + x;
            case 0xD do return -y + z;
            case 0xE do return  y - x;
            case 0xF do return -y - z;
            case #default do return 0; // never happens
        }
    }

    permutations: [256] u8 = u8.[
        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,
        89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,
        226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,
        17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,
        129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,
        251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,
        49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
    ]; 

    p :: macro (x: i32) -> i32 {
        permutations :: permutations;
        return cast(i32) permutations[x % 256];
    }
}

